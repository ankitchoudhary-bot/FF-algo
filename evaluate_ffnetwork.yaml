name: Evaluate FF Network model
description: Evaluates a trained FF Network model and outputs predictions and accuracy.
inputs:
  - {name: model, type: Model}
  - {name: x_test, type: JsonArray}
  - {name: y_test, type: JsonArray}
outputs:
  - {name: predictions, type: JsonArray}
  - {name: accuracy, type: Float}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 pip install --quiet tensorflow scikit-learn matplotlib || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 pip install --quiet tensorflow scikit-learn matplotlib --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import os
        import json
        import numpy as np
        from tensorflow import keras
        from keras import ops
        from sklearn.metrics import accuracy_score
        import matplotlib.pyplot as plt

        parser = argparse.ArgumentParser()
        parser.add_argument("--model", type=str, required=True)
        parser.add_argument("--x_test", type=str, required=True)
        parser.add_argument("--y_test", type=str, required=True)
        parser.add_argument("--predictions", type=str, required=True)
        parser.add_argument("--accuracy", type=str, required=True)
        args = parser.parse_args()

        # Load data
        with open(args.x_test, "r") as f:
            x_test = np.array(json.load(f), dtype=np.float64)
        with open(args.y_test, "r") as f:
            y_test = np.array(json.load(f), dtype=np.int64)

        # Load model
        model = keras.models.load_model(args.model)

        model.compile(
            optimizer=keras.optimizers.Adam(learning_rate=0.03),
            loss="mse",
            jit_compile=False,
            metrics=[],
        )

        # Train again to extract loss history
        epochs = 60
        history = model.fit(x_test, y_test, epochs=epochs)

        # Predict
        preds = model.predict(ops.convert_to_tensor(x_test))
        predictions = preds.reshape(preds, (preds.shape[0], preds.shape[1]))

        # Accuracy
        accuracy = accuracy_score(preds, y_test)

        # Save accuracy
        os.makedirs(os.path.dirname(args.accuracy), exist_ok=True)

        with open(args.accuracy, "w") as f:
            f.write(str(accuracy))

        # Plot and save loss 
        plt.plot(range(len(history.history["loss"])), history.history["loss"])
        plt.title("Loss over training")
        plt.savefig("loss_plot.png")
    args:
      - --model
      - {inputPath: model}
      - --x_test
      - {inputPath: x_test}
      - --y_test
      - {inputPath: y_test}
      - --predictions
      - {outputPath: predictions}
      - --accuracy
      - {outputPath: accuracy}
